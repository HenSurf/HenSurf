#!/bin/bash

# HenFire Browser Build System
# Wrapper around Mozilla's mach build system with HenFire customizations

set -e

HENFIRE_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
FIREFOX_SRC="$HENFIRE_ROOT/src/firefox"
MACH_SCRIPT="$FIREFOX_SRC/mach"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo_info() {
    echo -e "${BLUE}🔥 HenFire:${NC} $1"
}

echo_success() {
    echo -e "${GREEN}✅ HenFire:${NC} $1"
}

echo_warning() {
    echo -e "${YELLOW}⚠️  HenFire:${NC} $1"
}

echo_error() {
    echo -e "${RED}❌ HenFire:${NC} $1"
}

# Check if Firefox source exists
if [ ! -f "$MACH_SCRIPT" ]; then
    echo_error "Firefox source not found. Please run './scripts/bootstrap.sh' first."
    exit 1
fi

# Check if we're in the right directory
if [ ! -f "$HENFIRE_ROOT/README.md" ]; then
    echo_error "Please run this script from the HenFire root directory."
    exit 1
fi

# Function to show HenFire-specific help
show_henfire_help() {
    echo "🔥 HenFire Browser Build System"
    echo "=============================="
    echo ""
    echo "HenFire-specific commands:"
    echo "  ./mach henfire-setup     - Apply HenFire customizations"
    echo "  ./mach henfire-clean     - Clean HenFire customizations"
    echo "  ./mach henfire-status    - Show HenFire build status"
    echo "  ./mach henfire-package   - Create HenFire distribution package"
    echo ""
    echo "Standard Firefox commands:"
    echo "  ./mach build             - Build HenFire browser"
    echo "  ./mach run               - Run HenFire browser"
    echo "  ./mach test              - Run tests"
    echo "  ./mach package           - Create package"
    echo ""
    echo "For full Firefox mach help, run: ./mach help"
}

# Function to apply HenFire customizations
henfire_setup() {
    echo_info "Applying HenFire customizations..."
    
    cd "$HENFIRE_ROOT"
    
    # Apply patches
    if [ -x "scripts/apply-patches.sh" ]; then
        ./scripts/apply-patches.sh
    else
        echo_warning "Patch script not found or not executable"
    fi
    
    # Setup branding
    if [ -x "browser/branding/henfire/configure.sh" ]; then
        ./browser/branding/henfire/configure.sh
    fi
    
    # Copy mozconfig
    if [ -f "config/mozconfig.template" ]; then
        cp "config/mozconfig.template" "$FIREFOX_SRC/mozconfig"
        echo_success "Mozconfig applied"
    fi
    
    echo_success "HenFire customizations applied successfully!"
}

# Function to clean HenFire customizations
henfire_clean() {
    echo_info "Cleaning HenFire customizations..."
    
    cd "$FIREFOX_SRC"
    
    # Reset git repository
    if [ -d ".git" ]; then
        git checkout -- .
        git clean -fd
        echo_success "Firefox source reset to clean state"
    else
        echo_warning "Not a git repository, manual cleanup may be required"
    fi
}

# Function to show HenFire status
henfire_status() {
    echo "🔥 HenFire Browser Status"
    echo "========================"
    echo ""
    
    # Check if source exists
    if [ -d "$FIREFOX_SRC" ]; then
        echo_success "Firefox source: Present"
        
        # Check git status
        cd "$FIREFOX_SRC"
        if [ -d ".git" ]; then
            BRANCH=$(git branch --show-current 2>/dev/null || echo "unknown")
            COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
            echo_info "Git branch: $BRANCH"
            echo_info "Git commit: $COMMIT"
            
            # Check for modifications
            if ! git diff --quiet 2>/dev/null; then
                echo_warning "Source has local modifications (HenFire customizations applied)"
            else
                echo_info "Source is clean"
            fi
        fi
    else
        echo_error "Firefox source: Missing"
    fi
    
    # Check mozconfig
    if [ -f "$FIREFOX_SRC/mozconfig" ]; then
        echo_success "Mozconfig: Present"
        if grep -q "HENFIRE_BUILD" "$FIREFOX_SRC/mozconfig" 2>/dev/null; then
            echo_success "HenFire mozconfig detected"
        else
            echo_warning "Standard Firefox mozconfig detected"
        fi
    else
        echo_warning "Mozconfig: Missing"
    fi
    
    # Check build artifacts
    if [ -d "$FIREFOX_SRC/obj-x86_64-apple-darwin" ]; then
        echo_success "Build artifacts: Present"
    else
        echo_info "Build artifacts: Not found (clean build)"
    fi
    
    echo ""
}

# Function to create HenFire package
henfire_package() {
    echo_info "Creating HenFire distribution package..."
    
    cd "$FIREFOX_SRC"
    
    # Build first if needed
    if [ ! -d "obj-x86_64-apple-darwin" ]; then
        echo_info "No build found, building first..."
        python3 mach build
    fi
    
    # Create package
    python3 mach package
    
    # Copy to HenFire dist directory
    mkdir -p "$HENFIRE_ROOT/dist"
    
    # Find the created package
    PACKAGE_DIR="obj-x86_64-apple-darwin/dist"
    if [ -d "$PACKAGE_DIR" ]; then
        cp -r "$PACKAGE_DIR"/* "$HENFIRE_ROOT/dist/"
        echo_success "HenFire package created in dist/ directory"
    else
        echo_error "Package creation failed"
        exit 1
    fi
}

# Main command handling
case "$1" in
    "henfire-help" | "henfire" | "")
        show_henfire_help
        ;;
    "henfire-setup")
        henfire_setup
        ;;
    "henfire-clean")
        henfire_clean
        ;;
    "henfire-status")
        henfire_status
        ;;
    "henfire-package")
        henfire_package
        ;;
    "build")
        echo_info "Building HenFire browser..."
        cd "$FIREFOX_SRC"
        python3 mach build "$@"
        echo_success "HenFire build completed!"
        ;;
    "run")
        echo_info "Starting HenFire browser..."
        cd "$FIREFOX_SRC"
        python3 mach run "${@:2}"
        ;;
    *)
        # Pass through to Firefox mach
        cd "$FIREFOX_SRC"
        python3 mach "$@"
        ;;
esac